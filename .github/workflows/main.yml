on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
jobs:
  ofl:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@master
    - uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-ofl-${{ hashFiles('ofl/Cargo.lock') }}-${{ hashFiles('rust-toolchain')}}
        path: |
          ~/.cargo/git
          ~/.cargo/registry
          ofl/target/release

    - run: cargo build-times --release
      working-directory: ofl
    - run: cargo test-ofl

    - uses: actions/upload-artifact@v2
      with:
        name: ofl-timing-${{ runner.os }}
        path: ofl/cargo-timing.html
    - uses: actions/upload-artifact@v2
      with:
        name: ofl-${{ runner.os }}
        path: |
          ofl/target/release/ofl
          ofl/target/release/ofl.exe

  coverage:
    needs: ofl
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@v2
      with:
        name: ofl-${{ runner.os }}
        path: bin/
    # TODO(actions/download-artifact#14) undo hack
    - run: chmod +x bin/ofl
      if: runner.os != 'Windows'

    - run: cargo generate-lockfile
    - uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-coverage-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('rust-toolchain')}}
        path: |
          ~/.cargo/git
          ~/.cargo/registry
          target/coverage

    - name: core tests
      run: bin/ofl coverage collect test-core
    - name: dom tests
      run: bin/ofl coverage collect test-dom
    - run: bin/ofl coverage report
    - uses: codecov/codecov-action@v1
      with:
        file: ./target/coverage/lcov.info

  main:
    needs: ofl
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@v2
      with:
        name: ofl-${{ runner.os }}
        path: bin/
    # TODO(actions/download-artifact#14) undo hack
    - run: chmod +x bin/ofl
      if: runner.os != 'Windows'

    - run: cargo generate-lockfile
    - uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-moxie-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('rust-toolchain')}}
        path: |
          ~/.cargo/git
          ~/.cargo/registry
          target/debug
          target/wasm32-unknown-unknown/release
    
    - run: cargo build-times
    - name: upload build timings
      uses: actions/upload-artifact@v2
      with:
        name: moxie-build-times
        path: "cargo-timing.html"

    # browser tests w/o coverage
    - run: cargo test-augdom
    - run: cargo test-dom-lib-browser
    - run: cargo test-dom-hacking
    - run: cargo test-dom-todo
    - run: cargo test-dom-drivertest

    # examples, docs, website
    - run: cargo docs-all
    - run: cargo docs-ofl
    - run: bin/ofl website build target/website
    - uses: actions/upload-artifact@v2
      if: runner.os == 'Linux'
      with:
        name: website
        path: target/website

  fmt:
    needs: ofl
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@v2
      with:
        name: ofl-${{ runner.os }}
        path: bin/
    # TODO(actions/download-artifact#14) undo hack
    - run: chmod +x bin/ofl
    - run: bin/ofl fmt --check

  clippy:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@master
    - run: rustup component add clippy
    - run: cargo clippy-ofl
    - run: cargo clippy-core
    - run: cargo clippy-dom

  publish:
    needs: [coverage, fmt, clippy, main, ofl]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ofl-${{ runner.os }}
        path: bin/
    # TODO(actions/download-artifact#14) undo hack
    - run: chmod +x bin/ofl
    - uses: actions/download-artifact@v2
      with:
        name: website
        path: target/website
    - name: promote website to prod, ensure crates published
      if: github.ref == 'refs/heads/master'
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      run: |
        npx netlify-cli deploy --prod
        cargo login ${{ secrets.CARGO_API_TOKEN }}
        bin/ofl published
