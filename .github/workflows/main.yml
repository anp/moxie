on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
jobs:
  main:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@master
    - uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ofl/target

    - run: rustup update

    # build all crates, collect timings
    - name: build ofl
      run: cargo build-times --release
      working-directory: ofl
    - name: build moxie
      run: cargo build-times
    - name: archive build timings
      uses: actions/upload-artifact@v2
      with:
        name: build-times
        path: "**/cargo-timing.html"

    # tests with coverage
    - name: core tests
      run: cargo ofl coverage collect test-core
    - name: dom tests
      run: cargo ofl coverage collect test-dom
    - run: cargo ofl coverage report
    - name: archive coverage
      uses: actions/upload-artifact@v2
      with:
        name: coverage
        path: target/coverage/html
    - uses: codecov/codecov-action@v1
      with:
        file: ./target/coverage/lcov.info
        fail_ci_if_error: true

    # browser tests -- no coverage
    - run: cargo test-augdom
    - run: cargo test-dom-lib-browser
    - run: cargo test-dom-hacking
    - run: cargo test-dom-todo
    - run: cargo test-dom-drivertest

    # examples, docs, website
    - run: cargo docs-all
    - run: cargo docs-ofl
    - run: cargo build-website

    - name: assert the git repo hasn't changed
      if: runner.os == 'Linux'
      run: output=$(git status --porcelain) && [ -z "$output" ]
    - name: archive website
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v2
      with:
        name: website
        path: target/website
    - name: promote website to prod, ensure crates published
      if: github.ref == 'refs/heads/master' && runner.os == 'Linux'
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      run: |
        npx netlify-cli deploy --prod
        cargo login ${{ secrets.CARGO_API_TOKEN }}
        cargo ofl published

  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - run: rustup update
    - run: rustup component add clippy
    - run: cargo clippy-core
    - run: cargo clippy-dom
    - run: cargo clippy-ofl

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - run: cargo fmt-project --check
