load("//honk/rules/cargo/clippy.honk", "lint_crate")
load("//honk/rules/cargo/metadata.honk", "cargo_metadata", "rust_files_in_package")
load("//honk/rules/cargo/rustfmt.honk", "format_crate")
load("//honk/rules/cargo/wasm-pack.honk", "maybe_wasm_crate")


# TODO do the tests in two stages -- a build and then a run
# something like this to discover the filename cargo makes (thanks @yaahc)
# cargo test --no-run --message-format=json | \
#   jq -r "select(.profile.test == true) | \
#   .filenames[]" | grep -v dSYM - > filenames.txt


def test_crate(package):
    """
    Run `cargo test --all-targets -p ${package}`.
    """
    target(
        name="test-" + package.name,
        command=command(
            "cargo",
            args=["test", "--all-targets", "--package", package.name],
            inputs=rust_files_in_package(package),
            # TODO more granular output tracking somehow?
            # TODO automagically convert strings for inputs/outputs
            outputs=[path("target")],
        ),
    )


def doctest_crate(package):
    """
    Run `cargo test --doc -p ${package}`.
    """
    target(
        name="doctest-" + package.name,
        command=command(
            "cargo",
            args=["test", "--doc", "--package", package.name],
            inputs=rust_files_in_package(package),
            # TODO more granular output tracking somehow?
            # TODO automagically convert strings for inputs/outputs
            outputs=[path("target")],
        ),
    )


def document_crate(package):
    """
    Run `cargo doc --no-deps -p ${package}`.
    """
    target(
        name="rustdoc-" + package.name,
        command=command(
            "cargo",
            args=["doc", "--no-deps", "--package", package.name],
            inputs=rust_files_in_package(package),
            # TODO more granular output tracking somehow?
            # TODO automagically convert strings for inputs/outputs
            outputs=[path("target/doc")],
        ),
    )


def cargo_workspace(manifest):
    """
    Discovers targets from a Cargo workspace, defined by the path to its root ${manifest}.
    """
    metadata = cargo_metadata(manifest)
    for id in metadata.member_ids:
        package = metadata.packages[id]

        # mutators
        format_crate(package)

        # assets
        # TODO discover binary targets for `honk run`
        maybe_wasm_crate(package)
        document_crate(package)

        # "tests"
        test_crate(package)
        doctest_crate(package)
        lint_crate(package)
